# Generated by Django 5.2.6 on 2025-09-08 16:16

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField(unique=True, verbose_name='IP-адрес')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('last_seen', models.DateTimeField(auto_now=True, verbose_name='Последняя активность')),
            ],
            options={
                'verbose_name': 'Устройство',
                'verbose_name_plural': 'Устройства',
            },
        ),
        migrations.CreateModel(
            name='SensorConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('period', models.PositiveIntegerField(default=30, help_text='Период в секундах, с которым датчик должен отправлять данные. Если 0, датчик отправляет данные сразу после получения.', verbose_name='Период отправки данных')),
                ('server_timeout', models.PositiveIntegerField(default=5, help_text='Минимальное время в секундах между отправками данных с одного и того же IP-адреса. Если 0, ограничение на стороне сервера отсутствует.', verbose_name='Таймаут на стороне сервера')),
            ],
            options={
                'verbose_name': 'Глобальная конфигурация датчиков',
            },
        ),
        migrations.CreateModel(
            name='TemperatureReading',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contact_temp', models.FloatField(blank=True, help_text='Температура, измеренная контактным способом.', null=True, verbose_name='Контактная температура')),
                ('non_contact_temp', models.FloatField(blank=True, help_text='Температура, измеренная бесконтактным способом (например, инфракрасным).', null=True, verbose_name='Бесконтактная температура')),
                ('timestamp', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Метка времени')),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='readings', to='sensor.device', verbose_name='Устройство')),
            ],
            options={
                'verbose_name': 'Показание температуры',
                'verbose_name_plural': 'Показания температуры',
                'ordering': ['-timestamp'],
            },
        ),
    ]
