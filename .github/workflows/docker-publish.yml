# File: .github/workflows/docker-publish.yml
name: Build and Push Docker Image

# Этот workflow запускается при push в ветку 'main'
# и при создании Pull Request, нацеленного на 'main'.
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      # Шаг 1: Клонирование репозитория для доступа к исходному коду и Dockerfile.
      - name: Checkout repository
        uses: actions/checkout@v4

      # Шаг 2: Настройка QEMU для эмуляции различных архитектур CPU.
      # Это необходимо для кроссплатформенной сборки (например, для ARM64 на x86_64 хосте).
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Шаг 3: Настройка Docker Buildx, расширенного инструмента для сборки,
      # который поддерживает кроссплатформенные сборки и другие продвинутые функции.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Шаг 4: Вход в Docker Hub.
      # Используются секреты, которые должны быть предварительно настроены в репозитории GitHub:
      # DOCKERHUB_USERNAME - ваш логин в Docker Hub.
      # DOCKERHUB_TOKEN - токен доступа, сгенерированный в Docker Hub.
      - name: Login to Docker Hub
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Шаг 5: Извлечение метаданных Docker (тегов и меток).
      # Этот action автоматически генерирует подходящие теги для образа.
      # Например, для push в main он создаст тег 'latest'. Для других событий - другие теги.
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/python-sensor-backend

      # Шаг 6: Сборка и публикация образа.
      # 'push' установлен в 'true' только для push-событий в ветку main.
      # Для Pull Request образ будет только собираться, что позволяет проверить его валидность.
      # 'platforms' указывает, для каких архитектур собирать образ.
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
